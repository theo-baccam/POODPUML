#include <vector>
#include <flecs.h>
#include "LevelBuilder.hpp"
#include "flecs_ids.hpp"


LevelBuilder::LevelBuilder() {}
LevelBuilder::~LevelBuilder() {}

void LevelBuilder::buildEasyLevel(flecs::world &world) {
    const unsigned int mapDimensions = 16;

    for (int y = 0; y < mapDimensions; y++) {
        for (int x = 0; x < mapDimensions; x++) {
            if ((x == 0 && y == 0) || (x == 15 && y == 15)) continue;
            world.entity()
                .add<FloorTag>()
                .set<Position>({(double) x, (double) y});
        };
    };

    world.entity("Start")
        .set<Position>({0, 0});
    world.entity("End")
        .set<Position>({15, 15});
}

void LevelBuilder::buildMediumLevel(flecs::world &world) {
    const char map[] =
        ".........##S####........\n"
        ".......###########......\n"
        "...################.....\n"
        "..##################....\n"
        ".####################...\n"
        ".#########...########...\n"
        ".#######......########..\n"
        "########......#########.\n"
        "############..####..####\n"
        "##################..####\n"
        "######....#########..##.\n"
        "######......#######..##.\n"
        "######################..\n"
        "#########.###########...\n"
        ".######...##########....\n"
        ".######..########.......\n"
        "..#############.........\n"
        "..#############.........\n"
        ".......#########........\n"
        ".....#############......\n"
        "..################......\n"
        "..##################....\n"
        "...#################....\n"
        "....#E##....######......";

    int x = 0;
    int y = 0;
    for (char c : map) {
        switch (c) {
            case '#':
                world.entity()
                    .add<FloorTag>()
                    .set<Position>({(double) x, (double) y});
                break;
            case 'S':
                world.entity("Start")
                    .set<Position>({(double) x, (double) y});
                break;
            case 'E':
                world.entity("End")
                    .set<Position>({(double) x, (double) y});
                break;
            case '\n':
                x = 0;
                y++;
                break;
        };
        /*
        if (c == '#') {
            world.entity()
                .add<FloorTag>()
                .set<Position>({(double) x, (double) y});
        } else if (c == '\n') {
            x = 0;
            y++;
        }
        */
        x++;
    };
}

void LevelBuilder::buildHardLevel(flecs::world &world) {
    const char map[] =
        "..........................................####..................\n"
        "...................................##############...............\n"
        ".........................########################...............\n"
        "..................#################.##############..............\n"
        "...........################.........########....................\n"
        "####################................##..........................\n"
        "S##################................###..........................\n"
        "####################...............###..........................\n"
        ".............############....###########........#####...........\n"
        ".................##########################...########..........\n"
        "........................######...#######################........\n"
        ".................................########################.......\n"
        "..................................########################......\n"
        "...................................#######################......\n"
        "...................................######################.......\n"
        "..........##############..........#######################.......\n"
        "......########################...#########################......\n"
        ".....################...###################....############.....\n"
        "......###############........##########............#########....\n"
        ".........###############........###.....................###.....\n"
        ".........###.......#######.....###..............####...###......\n"
        "..........##.........#####......###.......#################.....\n"
        ".......######........############################..#########....\n"
        "....############.###########################..........######....\n"
        "...###################..####################...........####.....\n"
        "...##########.####......####################............##......\n"
        "....#########............###################...........###......\n"
        "....#########............###################..........###.......\n"
        "....########..............#####################....########.....\n"
        "....########................##############.################.....\n"
        ".....###.......................##########......####...###E#.....\n"
        "................................................................";

    int x = 0;
    int y = 0;
    for (char c : map) {
        switch (c) {
            case '#':
                world.entity()
                    .add<FloorTag>()
                    .set<Position>({(double) x, (double) y});
                break;
            case 'S':
                world.entity("Start")
                    .set<Position>({(double) x, (double) y});
                break;
            case 'E':
                world.entity("End")
                    .set<Position>({(double) x, (double) y});
                break;
            case '\n':
                x = 0;
                y++;
                break;
        };
        /*
        if (c == '#') {
            world.entity()
                .add<FloorTag>()
                .set<Position>({(double) x, (double) y});
        } else if (c == '\n') {
            x = 0;
            y++;
        }
        */
        x++;
    };
}